"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os # Ensure os is imported at the top
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)v#n7r5e4%ka=p42!f1p2g1&$@xt=114$3xgj^(0n(q2%0u+%1'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False 

ALLOWED_HOSTS = ['yourdomain.com', 'localhost', '127.0.0.1']

# CSRF_COOKIE_SECURE and SESSION_COOKIE_SECURE ensure cookies are only sent over HTTPS.
# Essential for production.
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Protect against XSS by enabling the browser's XSS filter.
SECURE_BROWSER_XSS_FILTER = True

# Protect against clickjacking by denying framing of the page.
X_FRAME_OPTIONS = 'DENY'

# Prevent browsers from MIME-sniffing a response away from the declared content-type.
SECURE_CONTENT_TYPE_NOSNIFF = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',  
    'relationship_app', 
    'accounts',  # Add your new app here
    'csp',
    # ... other apps 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware', 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Path where Django will store uploaded media files.
# Make sure you have a 'media' directory in your project root or configure as needed.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Add these lines for authentication redirects and static files
LOGIN_REDIRECT_URL = '/app/books/'  # Redirect to the books list after successful login
LOGOUT_REDIRECT_URL = '/app/login/' # Redirect to the login page after logout
LOGIN_URL = '/app/login/'           # URL for the login page

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Define where Django will look for static files within your apps
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # This assumes you might have a project-level static folder
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ...

AUTH_USER_MODEL = 'bookshelf.CustomUser' # Add this line

# advanced_features_and_security/advanced_features_and_security/settings.py

# ... (previous security settings) ...

# Content Security Policy (CSP) settings
# --------------------------------------------------------------------------

# Default-src: What sources are allowed by default for all content types
CSP_DEFAULT_SRC = ("'self'",) # Allow content from same origin

# Script-src: Where scripts can be loaded from
# If you use inline scripts (e.g., <script>alert('Hi')</script>), you'll need 'unsafe-inline'
# or nonces/hashes. 'strict-dynamic' is a more advanced secure approach.
# For simplicity, if you have no inline scripts and only use scripts from your domain:
CSP_SCRIPT_SRC = ("'self'",)
# Example if you use Google Analytics or other external scripts:
# CSP_SCRIPT_SRC = ("'self'", "https://www.googletagmanager.com", "https://www.google-analytics.com")


# Style-src: Where stylesheets can be loaded from
CSP_STYLE_SRC = ("'self'",)
# If you use inline styles or external CSS from CDNs:
# CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net")

# Img-src: Where images can be loaded from
CSP_IMG_SRC = ("'self'", "data:",) # 'data:' allows data URIs for images

# Font-src: Where fonts can be loaded from
CSP_FONT_SRC = ("'self'",) # Example if using Google Fonts: "https://fonts.gstatic.com"

# Connect-src: Where connect (XHR, WebSockets) can connect to
CSP_CONNECT_SRC = ("'self'",)

# Frame-ancestors: Prevents clickjacking for iframes/frames (stronger than X_FRAME_OPTIONS)
# Can replace X_FRAME_OPTIONS if set to 'none' or specific origins.
# CSP_FRAME_ANCESTORS = ("'none'",) # Disallow framing entirely

# Report-URI: Where to send CSP violation reports (optional, but recommended for monitoring)
# CSP_REPORT_URI = "/csp-report/" # You would need to set up a view to handle these reports

# CSP_REPORT_ONLY = True # Set to True during development to log violations without blocking